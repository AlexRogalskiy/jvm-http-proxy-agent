plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

group 'tech.httptoolkit'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Premain-Class': 'tech.httptoolkit.javaagent.HttpProxyAgent'
        attributes 'Agent-Class': 'tech.httptoolkit.javaagent.HttpProxyAgent'
        attributes 'Main-Class': 'tech.httptoolkit.javaagent.AttachMain'

        attributes 'Can-Redefine-Classes': 'true'
        attributes 'Can-Retransform-Classes': 'true'
    }

    // We include classes in our package. We *don't* include stub classes used to support multiple
    // dependency versions, which are under their corresponding real package names.
    include('tech/httptoolkit/javaagent/**/*')
}

dependencies {
    implementation group: 'net.bytebuddy', name: 'byte-buddy-dep', version: '1.10.20'

    // Dependencies we load only as part of rewriting them, iff the target app includes them:
    compileOnly group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
    compileOnly group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.0.3'
    compileOnly group: 'org.eclipse.jetty', name: 'jetty-client', version: '11.0.1'
    compileOnly group: 'org.asynchttpclient', name: 'async-http-client', version: '2.12.2'
    compileOnly group: 'io.projectreactor.netty', name: 'reactor-netty', version: '1.0.4'

    // Test deps:
    testImplementation group: 'io.kotest', name: 'kotest-runner-junit5-jvm', version: '4.4.0'
    testImplementation group: 'io.kotest', name: 'kotest-assertions-core-jvm', version: '4.4.0'
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.27.2"
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    // We need to build both JARs before the integration tests can run
    dependsOn('shadowJar')
    dependsOn(':test-app:shadowJar')
    useJUnitPlatform()
}

shadowJar {
    minimize()
    exclude '**/*.kotlin_metadata'
    exclude '**/*.kotlin_module'
    exclude '**/*.kotlin_builtins'
    exclude '**/module_info.class'
    exclude 'META-INF/maven/**'

    // We have to specifically exclude packages here, because we *do* want to include lots of non-local code, just not
    // these specific client stubs:
    exclude 'reactor/'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "tech.httptoolkit.relocated"
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar